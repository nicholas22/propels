{"name":"PropelS","body":"# Hi there!\r\n\r\nPropelS is a Scala library porting features of [JPropel](http://github.com/nicholas22/jpropel).\r\n\r\n- LINQ for Scala, using Scala semantics (such as functions, implicits, etc)\r\n- Conversions for easily working between Java and Scala collections\r\n- Free and open-source, can be used for commercial purposes (LGPL license)\r\n\r\n\r\n\r\n## LINQ\r\n\r\nA very popular language feature of C#, Language INtegrated Query adds native data querying capabilities. The Scala collections library supports most of these features, but you may not \r\nhave the time to learn an entirely new API. Using PropelS you can continue using an API you already know. Also, having a [Java port of LINQ](https://github.com/nicholas22/jpropel-light)\r\nyou may re-use your experience across three languages (C#, Java, Scala).\r\n\r\n    // declaration\r\n    val buff = Buffer(\"john\", \"james\", \"eddie\")\r\n\r\n    // transform & filter\r\n    val upper = Linq.select(buff, (x : String)=> StringUtils.titleCase(x) )\r\n    val jays = Linq.where(upper, (x : String) => x.startsWith(\"J\"))\r\n\r\n    // output: \"John, James\"\r\n    println(StringUtils.delimit(Linq.toArray(jays), \", \"))\r\n\r\n\r\n\r\n## Java <--> Scala collections bridging\r\n\r\nThere are a lot moving parts in Scala collections and having them changed a few times did not help many developers.\r\nUsing PropelS (this project!) you can easily convert between Java/Scala collections:\r\n\r\n\r\n#### toArray(...)\r\n\r\n    // Scala Traversable -> Array conversion\r\n    val buff = Buffer(\"a\", \"b\", \"c\", \"d\").asInstanceOf[Traversable[String]]\r\n    Linq.toArray(buff)\r\n    \r\n    // JDK ArrayList -> Array conversion\r\n    val list = new java.util.ArrayList[String]()\r\n    Linq.toArray(list)\r\n\r\n    // JDK Iterable -> Array conversion\r\n    val iterable = new java.util.ArrayList[String]().asInstanceOf[java.lang.Iterable[String]]\r\n    Linq.toArray(iterable)\r\n    \r\n    // JDK Enumeration -> Array conversion\r\n    val enum = new java.util.StringTokenizer(\"test\")  // note: implements Enumeration[Object]\r\n    Linq.toArray(enum)  \r\n\r\n#### toBuffer(...)\r\n\r\n    // Array -> Scala mutable Buffer\r\n    val arr = Array(\"a\", \"b\", \"c\", \"d\")\r\n    Linq.toBuffer(arr)\r\n    \r\n    // Scala Traversable -> Scala mutable Buffer\r\n    val seq = Buffer(\"a\", \"b\", \"c\", \"d\").asInstanceOf[Traversable[String]]\r\n    Linq.toBuffer(seq)    \r\n    \r\n    // JDK ArrayList -> Scala mutable Buffer\r\n    val list = new java.util.ArrayList[String]()\r\n    Linq.toBuffer(list)\r\n    \r\n    // JDK Iterable -> Scala mutable Buffer\r\n    val iterable = new java.util.ArrayList[String]().asInstanceOf[java.lang.Iterable[String]]\r\n    Linq.toBuffer(iterable)\r\n    \r\n    // JDK Enumeration -> Scala mutable Buffer\r\n    val enum = new java.util.StringTokenizer(\"test\")  // note: implements Enumeration[Object]\r\n    Linq.toBuffer(enum)  \r\n\r\n#### toSeq(...)\r\n\r\n    // Array -> Scala immutable IndexedSeq\r\n    val arr = Array(\"a\", \"b\", \"c\", \"d\")\r\n    Linq.toSeq(arr)\r\n    \r\n    // Scala Traversable -> Scala immutable IndexedSeq\r\n    val seq = Buffer(\"a\", \"b\", \"c\", \"d\").asInstanceOf[Traversable[String]]\r\n    Linq.toSeq(seq)    \r\n    \r\n    // JDK ArrayList -> Scala immutable IndexedSeq\r\n    val list = new java.util.ArrayList[String]()\r\n    Linq.toSeq(list)\r\n    \r\n    // JDK Iterable -> Scala immutable IndexedSeq\r\n    val iterable = new java.util.ArrayList[String]().asInstanceOf[java.lang.Iterable[String]]\r\n    Linq.toSeq(iterable)\r\n    \r\n    // JDK Enumeration -> Scala immutable IndexedSeq\r\n    val enum = new java.util.StringTokenizer(\"test\")  // note: implements Enumeration[Object]\r\n    Linq.toSeq(enum)\r\n\r\n#### toArrayList(...)\r\n\r\n    // Array -> JDK ArrayList\r\n    val arr = Array(\"a\", \"b\", \"c\", \"d\")\r\n    Linq.toArrayList(arr)\r\n    \r\n    // Scala Traversable -> JDK ArrayList\r\n    val seq = Buffer(\"a\", \"b\", \"c\", \"d\").asInstanceOf[Traversable[String]]\r\n    Linq.toArrayList(seq)    \r\n    \r\n    // JDK Iterable -> JDK ArrayList\r\n    val iterable = new java.util.ArrayList[String]().asInstanceOf[java.lang.Iterable[String]]\r\n    Linq.toArrayList(iterable)\r\n    \r\n    // JDK Enumeration -> JDK ArrayList\r\n    val enum = new java.util.StringTokenizer(\"test\")  // note: implements Enumeration[Object]\r\n    Linq.toArrayList(enum)\r\n\r\n\r\n\r\n## Free and Open\r\n\r\nYou may use this project in open and closed source projects. The LGPL license simply requests any changes made to this library alone, to be contributed back. Help us evolve!\r\n\r\n\r\n\r\n## Dependencies\r\n\r\nAs PropelS is in its early stages, it currently depends on the latest [JPropel-light library](https://github.com/nicholas22/jpropel-light) because it requires certain un-ported yet classes.\r\nThere are plans to port certain things over to Scala (especially if they are using functional features), which are currently handled using [lombok-pg](https://github.com/peichhorn/lombok-pg). \r\n\r\n\r\n\r\n##Changelog\r\n\r\n####1.0: Creation\r\nAll LINQ methods have been ported.  \r\nAdded extra methods: partition, unzip (these will be backported to jpropel)","tagline":"The jpropel library in Scala flavour","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}